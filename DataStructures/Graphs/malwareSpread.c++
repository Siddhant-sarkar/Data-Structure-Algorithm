#include"bits/stdc++.h"
using namespace std;

class Solution {
public:
	vector<int> par;
	vector<int> size;
	int find(int x){
		if(par[x]==x) return x;
		return par[x] = find(par[x]);
	}
	bool unite(int x,int y){
		if(x!=y){
			if(size[x]<size[y]) swap(x,y);
			par[y]=x;
			size[x]	+=size[y];
			return true;
		}
		return false;
	}
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int n = graph.size() ;
		par.resize(n);
		size.resize(n);
		for(int i=0;i<n;i++) {par[i]=i;size[i]=1;}
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(graph[i][j]){
					int p1 = find(i);
					int p2 = find(j);
					unite(p1,p2);
				}
			}
		}
		unordered_map<int,int> freq;
		for(int i: initial){
			int f = find(i);
			freq[f]++;
		}
		int ans=INT_MAX, most=0;
		for(auto i: initial){
			int f = find(i)	;
			int sz = 0;
			if(freq[f]==1){
				sz = size[f];
			}
			if(sz >most || (sz==most && i<ans) ){
				most = sz;
				ans = i	;
			}
		}
		return ans;
    }
};



int main(){
	cout<<"Houstan, Congrats"<<endl;
	return 0;
}